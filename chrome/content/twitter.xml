<?xml version="1.0"?>
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# The contents of this file are subject to the Mozilla Public License Version
# 1.1 (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
# for the specific language governing rights and limitations under the
# License.
#
# The Original Code is TwitterXUL.
#
# The Initial Developer of the Original Code is
# Dave Townsend <dtownsend@oxymoronical.com>.
# Portions created by the Initial Developer are Copyright (C) 2009
# the Initial Developer. All Rights Reserved.
#
# Contributor(s):
#
# Alternatively, the contents of this file may be used under the terms of
# either the GNU General Public License Version 2 or later (the "GPL"), or
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
# in which case the provisions of the GPL or the LGPL are applicable instead
# of those above. If you wish to allow use of your version of this file only
# under the terms of either the GPL or the LGPL, and not to allow others to
# use your version of this file under the terms of the MPL, indicate your
# decision by deleting the provisions above and replace them with the notice
# and other provisions required by the GPL or the LGPL. If you do not delete
# the provisions above, a recipient may use your version of this file under
# the terms of any one of the MPL, the GPL or the LGPL.
#
# ***** END LICENSE BLOCK *****

<!DOCTYPE bindings [
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd" >
%brandDTD;
<!ENTITY % windowDTD SYSTEM "chrome://twitter/locale/" >
%windowDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="status" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
    <content orient="horizontal" align="stretch">
      <xul:vbox pack="start" class="left-box">
        <xul:stack class="avatar-stack">
          <xul:vbox align="center" pack="center">
            <xul:image class="loading-image"/>
          </xul:vbox>
          <xul:vbox align="start" pack="start">
            <xul:image class="avatar-image" xbl:inherits="src=author_imageURL"/>
          </xul:vbox>
          <xul:vbox align="end" pack="end">
            <xul:image class="overlay-image"/>
          </xul:vbox>
        </xul:stack>
      </xul:vbox>
      <xul:vbox flex="1">
        <xul:hbox align="end">
          <xul:label class="title-label" xbl:inherits="value=title"/>
          <xul:spacer flex="1"/>
          <xul:button class="reply-button plain" onclick="document.getBindingParent(this).replyToStatus()"
                      label="&reply-button.label;" tooltiptext="&reply-button.tooltip;"/>
        </xul:hbox>
        <xul:vbox class="status-box">
          <xbl:children/>
        </xul:vbox>
        <xul:label class="age-label" xbl:inherits="value=age"/>
      </xul:vbox>
    </content>
    <implementation>
      <constructor>
      <![CDATA[
        var strings = document.getElementById("main-strings");

        // Format the title based on the message type and recipient
        if (this.type == 2) {
          if (this.getAttribute("author_type") == 0)
            this.setAttribute("title",
                              strings.getFormattedString("directmessage.sent.title",
                                                         [this.getAttribute("target_name")]));
          else
            this.setAttribute("title",
                              strings.getFormattedString("directmessage.received.title",
                                                         [this.getAttribute("author_name")]));
        }
        else {
          this.setAttribute("title", this.getAttribute("author_name"));
        }

        // Escape out any tags to prevent remote exploits
        var text = this.text.replace("<", "&lt;");
        text = this.text.replace(">", "&gt;");

        // Linkify @username and things that look like web links
        var urlreg = new RegExp("((?:http|https|ftp):\\/\\/[^\\s\\)\\]]+)(\\.?)", "g");
        var userreg = new RegExp("(^|[\\(\\s])@(\\S+)([,\\.\\)]?)", "g");
        text = text.replace(urlreg, "<a href='$1'>$1</a>$2");
        text = text.replace(userreg, "$1<a href='http://twitter.com/$2'>@$2</a>$3");

        var div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");
        div.setAttribute("class", "status-div");
        div.innerHTML = text;
        this.appendChild(div);

        // Generate a human readable time
        Components.utils.import("resource://gre/modules/PluralForm.jsm");
        var date = Math.floor((Date.now() - this.date) / 60000);
        if (date >= 1440) {
          // Display in number of days
          date = Math.floor(date / 1440);
          var form = strings.getString("timerange.days");
          text = PluralForm.get(date, form).replace("#1", date);
        }
        else if (date >= 60) {
          // Display in number of hours
          date = Math.floor(date / 60);
          form = strings.getString("timerange.hours");
          text = PluralForm.get(date, form).replace("#1", date);
        }
        else if (date < 1) {
          // Less than a minute ago
          text = strings.getString("timerange.seconds");
        }
        else {
          // Display in number of minutes
          form = strings.getString("timerange.minutes");
          text = PluralForm.get(date, form).replace("#1", date);
        }
        this.setAttribute("age", text);
      ]]>
      </constructor>

      <property name="author" readonly="true"
                onget="return this.getAttribute('author_username');"/>

      <property name="type" readonly="true"
                onget="return this.getAttribute('type');"/>

      <property name="text" readonly="true"
                onget="return this.getAttribute('text');"/>

      <property name="source" readonly="true"
                onget="return this.getAttribute('source');"/>

      <property name="date" readonly="true"
                onget="return this.getAttribute('date') * 1000;"/>

      <method name="replyToStatus">
        <body>
          replyTo(this.author);
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="reply" extends="#status">
  </binding>

  <binding id="direct" extends="#status">
    <implementation>
      <method name="replyToStatus">
        <body>
          directMessage(this.author);
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="toolbarbutton-menu" display="xul:menu" 
           extends="chrome://global/content/bindings/toolbarbutton.xml#menu">
    <content>
      <children includes="observes|template|menupopup|panel|tooltip"/>
      <xul:image class="toolbarbutton-icon" xbl:inherits="validate,src=image,toolbarmode,buttonstyle"/>
      <xul:label class="toolbarbutton-text" crop="right" flex="1"
                 xbl:inherits="value=label,accesskey,crop,dragover-top,toolbarmode,buttonstyle"/>
      <xul:dropmarker type="menu" class="toolbarbutton-menu-dropmarker" xbl:inherits="disabled,label"/>
    </content>
  </binding>
4</bindings>
